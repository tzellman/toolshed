Package galoot;

///////////////////////////////////////////////////////////////////////////////
Helpers
///////////////////////////////////////////////////////////////////////////////

    digit           = ['0' .. '9'];
    alpha           = [['A' .. 'Z'] + ['a' .. 'z']];
    alpha_num       = alpha | digit;
    any_char        = [0x0 .. 0xfffff];
    latin1_char     = [0x0 .. 0xff];
    whitespace      = 13 | 10 | 9 | ' ';
    

///////////////////////////////////////////////////////////////////////////////
States
///////////////////////////////////////////////////////////////////////////////
    default,        //the default state
    var,            //when "inside" a variable expression: e.g. {{ var }}
    expr,           //when "inside" an expression: e.g. var.member
    expr_member,    //used to disambiguate id and member
    var_member      //used to disambiguate id and member
    ;

    
///////////////////////////////////////////////////////////////////////////////
Tokens
///////////////////////////////////////////////////////////////////////////////

    {default}
        comment         = '{#' [any_char - '#']* '#'+ ([any_char - ['#' + '}']] [any_char - '#']* '#'+)* '}';
    
    {default->var}
        var_start       = '{{';
    
    {var->default}
        var_end         = '}}';
    
    {var->var_member, expr->expr_member}
        dot             = '.';
    
    {var, expr}
        id              = (alpha | '_') (alpha_num | '_')*;
    
    {expr_member->expr, var_member->var}
        member          = (alpha_num | '_')+;
    
    {expr, var}
        expr_ws         = whitespace+;
    
    {default}
        text_char       = latin1_char;
    

///////////////////////////////////////////////////////////////////////////////
Ignored Tokens
///////////////////////////////////////////////////////////////////////////////
    expr_ws, comment;


///////////////////////////////////////////////////////////////////////////////
Productions
///////////////////////////////////////////////////////////////////////////////

    document = [entities]:entity+;
    
    entity {-> entity} =
            {char}      [char]:text_char                                {-> New entity.char(char)}
        |   {variable}  var_start [expression]:var_expression var_end   {-> New entity.variable(expression)}
        ;

    var_expression {-> var_expression} = 
            {reference} [referent]:id [lookup]:memberchain?             {-> New var_expression(referent, [lookup.member])}
            ;

    memberchain {-> member+} =
                {single}   dot [member]:member                          {-> [member]}
            |   {multiple} dot [member]:member [rest]:memberchain       {-> [member, rest.member]}
            ;
        

///////////////////////////////////////////////////////////////////////////////
Abstract Syntax Tree
///////////////////////////////////////////////////////////////////////////////

    document = [entities]:entity+;
    
    entity =
            {char}      [char]:text_char
        |   {variable}  [expr]:var_expression;

    var_expression = [referent]:id [members]:member*;
        
