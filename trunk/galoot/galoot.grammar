Package galoot;

///////////////////////////////////////////////////////////////////////////////
Helpers
///////////////////////////////////////////////////////////////////////////////

    digit           = ['0' .. '9'];
    alpha           = [['A' .. 'Z'] + ['a' .. 'z']];
    alpha_num       = alpha | digit;
    any_char        = [0x0 .. 0xfffff];
    latin1_char     = [0x0 .. 0xff];
    

///////////////////////////////////////////////////////////////////////////////
States
///////////////////////////////////////////////////////////////////////////////
    base, var;

    
///////////////////////////////////////////////////////////////////////////////
Tokens
///////////////////////////////////////////////////////////////////////////////

    {base}          comment         = '{#' [any_char - '#']* '#'+ ([any_char - ['#' + '}']] [any_char - '#']* '#'+)* '}';
    
    //variable translation tokens
    {base->var}     var_start       = '{{';
    {var->base}     var_end         = '}}';
    {var}           dot             = '.';
    {var}           id              = (alpha | '_') (alpha_num | '_')*;
    {var}           member          = (alpha_num | '_')+;
    {var}           var_spaces      = (13 | 10 | 9 | 20);
    
    {base}          text_char       = latin1_char;
    

///////////////////////////////////////////////////////////////////////////////
Ignored Tokens
///////////////////////////////////////////////////////////////////////////////
    //comment;
    var_spaces;

///////////////////////////////////////////////////////////////////////////////
Productions
///////////////////////////////////////////////////////////////////////////////

    document = [entities]:entity+;
    
    entity {-> entity} =
            {comment}   [comment]:comment                               {-> New entity.comment(comment)}
        |   {char}      [char]:text_char                                {-> New entity.char(char)}
        |   {variable}  var_start [expression]:var_expression var_end   {-> New entity.variable(expression)}
        ;

    var_expression {-> var_expression} = 
            {reference} [referent]:id [lookup]:memberchain?             {-> New var_expression.reference(referent, [lookup.member])}
            ;

    memberchain {-> member+} =
                {single}   dot [member]:member                          {-> [member]}
            |   {multiple} dot [member]:member [rest]:memberchain       {-> [member, rest.member]}
            ;
        

///////////////////////////////////////////////////////////////////////////////
Abstract Syntax Tree
///////////////////////////////////////////////////////////////////////////////

    document = [entities]:entity+;
    
    entity =
            {comment}   [comment]:comment
        |   {char}      [char]:text_char
        |   {variable}  [expr]:var_expression;

    var_expression = 
            {reference} [referent]:id [members]:member*;
        
