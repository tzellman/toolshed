#labels Featured,Galoot
== Introduction ==

Galoot is a templating engine written in Java, designed after the [http://www.djangoproject.com/documentation/templates/ Django templating engine] for Python. Currently, this project is being developed for a compilers course and is considered to be in an early stage of development. The project uses [http://sablecc.org/ SableCC] to generate the lexer/parser from the language grammar.


== Templates ==
In the most abstract sense, a template is any form of input (text) which contains special (optional) processing tags. The text (usually represented in the form of a file) is interpreted, resulting in output text.


== Useful Information ==
Below are some useful notes on definitions or circumstantial behaviors.

==== Silently Ignoring Variables ====
If a variable expression ever evaluates to "null", then the variable is not transformed to the output.
Example:
{{{
This should be empty in the output: "{{ badVar }}"
}}}

==== Boolean-ness ====
When evaluating variables the following cases result in "false":
  * null object
  * boolean false
  * number == 0
  * empty List/Map/String
Example:
{{{
Evaluates to false if the list is empty: {% if empty_list %}list was not empty!{% endif %}

Is the list empty? {{ empty_list|yesno:"no it is not,yes it is" }}
}}}


== Template Inheritance ==
One of the greatest features of Galoot is the fact that you are able to inherit templates. In the following examples we will discuss a common use case for template inheritance.

=== HTML Example ===
So you've decided to create the world's greatest online, Web 3.0 pet store. (Yes, 3.0 because you're just that good!) You have to start somewhere, and, yes we might be biased, Galoot is the best place to start. You want to design your application so that you can maximize code reuse. So, you decide to start with a top-level base HTML page which will serve as the root/parent of all of your templates. Here is an example:

{{{
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <link rel="stylesheet" href="site.css" />
    <title>{% block title %}Pets R Us{% endblock %}</title>
    {% block extrahead %}{% endblock %}
</head>

<body>
    <div id="header">{% block header %}{% endblock %}</div>
    <div id="main"
        {% block main %}
            {{ content }}
        {% endblock %}
    </div>
    <div id="footer">{% block footer %}{% endblock %}</div>
</body>
</html>
}}}


== Built-in Tags ==

==== block ====
The block tag deals with template inheritance. It is used to fragment the document into sections which can be overridden by sub-documents.
Example:
{{{
{% block content %}
    block text
{% endblock %}
}}}

==== comment ====
Place a comment in the file, which will be ignored during processing. There are two ways to comment, one being far less verbose.
Example:
{{{
{% comment %} this is the verbose way to create a comment... {% endcomment %}

{# the more concise comment #}
}}}

==== extends ====
The extends tag signifies that the template extends a parent template. The extends tag, if being used, must occur as the very first tag in the document. Read the section on Template Inheritance to learn more.

Examples:
Extend a template, by file name:
{{{
{% extends "base.html" %}
{% block content %} sub-content {% endblock %}
}}}

Extend a template by evaluating a variable:
{{{
{% extends parentTemplate|lower %}
{% block content %} sub-content {% endblock %}
}}}

==== filter ====
Apply filters to a block of data.

Examples:
{{{
{% filter lower %}
    Make this block ALL lower text, Including variables, etc.: {{ var }}
{% endfilter %}

{# we can chain filters together too #}

{% filter lower|count %}
    First, lower case this block, then evaluate the length of the data...
{% endfilter %}
}}}

==== firstof ====
Returns the first non-false value from a list of arguments. (See the boolean-ness note above.) The arguments can be variable expressions (including filters), or strings. This is useful if you want to provide a default value.

Examples:
{{{
{% firstof var1 var2 var3 "nothing" %}
    
Welcome {% firstof user.name "New User" %}!
}}}

==== for ====
Loop over a variable (List, Iterable, array, String).

Example:
{{{
{% for user in users %}
    User {{ forloop.counter0 }}: {{ user.name }}
{% endfor %}
}}}

==== if ====
Conditionally evaluate a block of data. 

Examples:
{{{
{% if var1 or var2 %}
    at least one of var1 or var2 is not "false"
{% endif %}

{% if var1 %}
    true
{% else %}
    false
{% endif %}

{% if not var1 %}
    false
{% endif %}

{% if not var1 and not var2 %}
    both var1 and var2 are "false"
{% endif %}

}}}

==== ifequal ====
Conditionally evaluate a block if two variables/strings are equal. The arguments can be variable expressions or strings.

Examples:
{{{
{% ifequal "tom" "adam" %}
    we are equals!
{% else %}
    we are not equals...
{% endifequal %}

{% ifequal user.name "admin" %}
    hello admin user!
{% endifequal %}

{% ifequal user.name|lower pageUser.name|lower %}
    you are viewing your own page
{% endifequal %}
}}}

==== include ====
Include a file at the specified location in the document. The included document will be rendered using the current context (all variables/filters/tags will be available to it).

Example:
{{{
{% for user in users %}

    {# the userPage will be able to use the "user" loop variable #}
    {% include "userPage.html %}

{% endfor %}
}}}

==== load ====
The load tag loads a list of filter plug-ins into the current context. Currently, once loaded, the filters are available globally to the document being evaluated. This may change in the future to be available only in the current context (and sub-contexts) to which it is declared. All plug-ins must be registered with the PluginRegistry, otherwise they will not be loaded. Optionally, filter plug-ins can be aliased using the "as" keyword.

Examples:
{{{
{% load "is_null" %}

{# now the is_null filter is available to use, as long as it existed in the global registry #}

{% if var|is_null %}
    the variable is null
{% endif %}


{% load "is_null" as IsNull %}
{% if var|IsNull %}
    the variable is null
{% endif %}


{# we can also load filter plug-ins that are referenced from a variable expression #}

{% load pluginName|lower as my_filter %}

{% filter my_filter %}
    apply the dynamically loaded filter plug-in to this block
{% endfilter %}

}}}

==== with ====
Set a variable in the context of the containing block. This is useful for "expensive" operations, to cache a variable.

Example:
{{{
{% with database.users.count as count %}

    there are {{ count }} users.

    the variable count is only available in this block.

{% endfor %}
}}}



== FAQ ==
  # *What's up with the name?*
    The name is sort of random, but not completely. Galoot is uncommonly known as a left-recursive acronym for _"Galoots Are Lovers Of Old Tools"_. That being said, we believe that this library/engine is just that thing that galoots need: something new and exciting. So, if you happen to be a galoot (not the big ogre kind, but the lover of old tools kind), then we think you might want to give Galoot a chance. You might break out of your galoot-ness (for the moment) and use a _new_ tool. Then, you'll become a galoot once again after you start loving Galoot (does that make sense? :)). In addition, the word galoot sounds similar to the phrase _"glue it"_, which is exactly what Galoot lets you do: glue documents, text, and variables together!