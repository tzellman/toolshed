#labels Example,Featured,Galoot
==Introduction==

To show a quick and simple example of how the [Galoot] template engine could be used, we have written a Mad Lib generator. The example application fills in a [Galoot] template with randomly chosen words from a dictionary configuration file.

The configuration file consists of lists of various words split up into various classifications from the specific (names, liquids, places) to the general (parts of speech: nouns, verbs, adjectives, etc.)

==Madlib.galoot==

{{{
{% load "underline" %}
{% include "header.galoot" %}
{% include "body.galoot" %}
{% include "footer.galoot" %}
}}}

As Galoot reads this file, the load directive tells the framework to make the "underline" filter available. What this means will become clearer as we progress.

The include directive tells Galoot to look into a special set of paths (configurable by the user of the framework) for the each of the listed .galoot template files. These files will be loaded and parsed by the framework. Any galoot directives encountered therein will  in turn be parsed and evaluated in the same fashion.

Note that templates can be any text file.

==body.galoot==

body.galoot is where most of the "action" occurs in the evaluation of Madlib.galoot. Here it is in all its glory:
{{{
<h1>A day at the amusement park with *{{ person|random|underline }}*</h1>

<p>
An amusement park is always fun to visit on a hot summer
{{ noun|random|underline }}. When you get there, you can rent a
{{ noun|random|underline }} and go for a swim. And there are lots of
{{ adjective|random|underline }} things to eat. You can start off with a hot dog on
a/an {{ noun|random|underline }} with mustard, relish, and {{ plnoun|random|underline }}
on it. Then you can have a buttered ear of {{ noun|random|underline }} with a
nice {{ adjective|random|underline }} slice of watermelon and a big bottle of
cold {{ liquid|random|underline }}. When you are full, it's time to go on the
roller coaster, which should settle your {{ noun|random|underline }}.
Other amusement park rides are the Dodge-Em which has little
{{ plnoun|random|underline }}, that you drive and run into other {{ plnoun|random|underline }},
and the Merry-Go-Round where you can sit on a big {{ noun|random|underline }}
and try to grab the gold {{ noun|random|underline }} as you ride past.
</p>
}}}

Doesn't get much nicer than that does it? (Didn't think so.) In between the funny brackets `{{` `}}` is where the [Galoot] magic happens. For example:
{{{
{{ plnoun|random|underline }}
}}}

This is an example of a _variable expression_. A variable expression consists of variable
(`plnoun` in this case) followed by one or more _filters_. Note that in a variable expression, we can also refer to the member fields and methods of a variable via the familiar dot notation. If `plnoun` has a `length` member, we can paste it directly into the document this way:
{{{
How many plural nouns are there? Answer: '{{ plnoun.length }}'
}}}

====What's a filter?====
Filters are an idea borrowed from the Django framework, who were no doubt inspired by the ability to create pipelines of commands in many Unix shells. Here we are piping the 'output' of a variable to the input of one or more special function objects that will 

In our example, we make use of two filters: 'random' and 'underline'. 'random' is a built-in filter provided with the [Galoot] framework. It takes a list-like object, and picks a random element from it. 'underline' is an example of a user-defined filter. It will wrap the the string representation of the object piped to it in special formatting tags that will cause it to render with an underline when viewed in a web browser.

Remember when we issued a `{{ load "underline"}}` back in Madlib.galoot? That directive told galoot to make available a non-default filter for use in the templates rendered from that point on.

==header.galoot and footer.galoot==

The header and footer galoot templates are (very) simple text files that create the header and footer (who'd have guessed?) of an html document. They contain no special galoot directives, and are thus pasted verbatim into Madlib.galoot as it is evaluated.

==