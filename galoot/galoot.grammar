// =============================================================================
// This file is part of Galoot
// =============================================================================
// (C) Copyright 2009, Tom Zellman, tzellman@gmail.com
//
// Galoot is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either 
// version 3 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public 
// License along with this library.  If not, see <http://www.gnu.org/licenses/>.
// 
//
Package galoot;

///////////////////////////////////////////////////////////////////////////////
Helpers
///////////////////////////////////////////////////////////////////////////////

    digit           = ['0' .. '9'];
    alpha           = [['A' .. 'Z'] + ['a' .. 'z']];
    alpha_num       = alpha | digit;
    any_char        = [0x0 .. 0xfffff];

    //whitespace
    ht              = 9;
    lf              = 10;
    ff              = 12;
    cr              = 13;
    ws              = ht| lf | ff | cr | ' ';
    eol             = cr | lf | cr lf;  //end of line
    
    no_ws_char      = [[[any_char - [ht + lf]] - [ff + cr]] - ' '];
    
    variable_id     = (alpha | '_') (alpha_num | '_')*;
    member_id       = (alpha_num | '_')+;
    
    //the following helpers deal with characters that are allowed in
    //expressions, statements, etc. (program flow characters)
    input_char      = [any_char - [cr + lf]];
    single_char     = [input_char - [''' + '\']];
    octal_digit     = ['0'..'7'];
    octal_escape    = '\' (octal_digit octal_digit? | ['0'..'3'] octal_digit octal_digit);
    escape_sequence = '\b' | '\t' | '\n' | '\f' | '\r' | '\"' | '\' ''' | '\\' | octal_escape;
    dq_string_char  = [input_char - ['"' + '\']] | escape_sequence;
    sq_string_char  = [input_char - [''' + '\']] | escape_sequence;
    string          = '"' dq_string_char* '"' | ''' sq_string_char* ''';
//    string          = '"' dq_string_char* '"';
    

///////////////////////////////////////////////////////////////////////////////
States
///////////////////////////////////////////////////////////////////////////////
    default,        //the default state
    var,            //when "inside" a variable expression: e.g. {{ var }}
    var_member,     //used to disambiguate id and member
    block_tag,      //{% block name %} stuff {% endblock %}
    include_tag,    //{% include "file.html" %}, {% include fileFromVar %}
    comment_block,  //{% comment %} foo bar {% endcomment %}
    filter,         //used only so we can differentiate between different tokens
    with_var,       //{% with obj.expensive.op as var %} {% endwith %}
    with_member,
    with_filter,
    set_arg,
    set_var,       //{% set obj.expensive.op as var %}
    set_member,
    set_filter,
    load_var,       //{% load plugin1 plugin2 %}
    load_as,
    load_member,
    if_var,         //{% if not var and var2 %} {% else %} {% endif %}
    if_member,
    if_filter,
    ifeq_var,       //{% ifequal var var2 "tom" %} {% else %} {% endifequal %}
    ifeq_member,
    ifeq_filter,
    for_tag,        //{% for i in var %} do something {% endfor %}
    for_var,
    for_member,
    for_filter,
    extends_tag,
    firstof_var,    //{% firstof var1 var2 var3 "default" %}
    firstof_member,
    firstof_filter,
    filter_var,
    filter_filter,
    template_tag,
    now_tag,
    macro_tag,
    macro_var,
    binary_var
    ;

    
///////////////////////////////////////////////////////////////////////////////
Tokens
///////////////////////////////////////////////////////////////////////////////

    //put higher precedence keywords here

    {with_var, load_as->load_var, set_var}
        kw_as           = 'as';
    {if_var}
        kw_not          = 'not';
    
    {if_var}
        kw_and          = 'and';
    
    {if_var}
        kw_or           = 'or';
    
    {if_var->binary_var}
        kw_gt           = '>';
    
    {if_var->binary_var}
        kw_gte          = '>=';

    {if_var->binary_var}
        kw_lt           = '<';

    {if_var->binary_var}
        kw_lte          = '<=';
    
    {if_var->binary_var}
        kw_eq          = '==';
    
    {if_var->binary_var}
        kw_ne          = '!=';

    {default}
        simple_comment  = '{#' [any_char - '#']* '#'+ ([any_char - ['#' + '}']] [any_char - '#']* '#'+)* '}';
    
    {default->var}
        var_start       = '{{';
    
    {var->default}
        var_end         = '}}';
    
    {for_tag->for_var}
        kw_in           = 'in';
    
    {default->block_tag}
        block_start     = '{%' ws* 'block' ws+;
    
    {default->load_var}
        load_start      = '{%' ws* 'load' ws+;
    
    {default->include_tag}
        include_start   = '{%' ws* 'include' ws+;
    
    {default->macro_tag}
        macro_start     = '{%' ws* 'macro' ws+;
    
    {default->firstof_var}
        firstof_start   = '{%' ws* 'firstof' ws+;
    
    {default->for_tag}
        for_start       = '{%' ws* 'for' ws+;
    
    {default->if_var}
        if_start        = '{%' ws* 'if' ws+;
    
    {default->if_var}
        elseif_start    = '{%' ws* 'elseif' ws+;
    
    {default->ifeq_var}
        ifeq_start      = '{%' ws* 'ifequal' ws+;
    
    {default->filter_var}
        filter_start    = '{%' ws* 'filter' ws+;
    
    {default->with_var}
        with_start      = '{%' ws* 'with' ws+;
    
    {default->set_arg}
        set_start       = '{%' ws* 'set' ws+;
    
    {default->now_tag}
        now_start       = '{%' ws* 'now' ws+;
    
    {default->extends_tag}
        extends_start   = '{%' ws* 'extends' ws+;
    
    {default->template_tag}
        templatetag     = '{%' ws* 'templatetag' ws+;
    
    {default}
        else_tag        = '{%' ws* 'else' ws* '%}' eol?;
    
    {default}
        elseif_tag      = '{%' ws* 'elseif' ws* '%}' eol?;
    
    {default}
        if_end          = '{%' ws* 'endif' ws* '%}';
    
    {default}
        ifeq_end        = '{%' ws* 'endifequal' ws* '%}';
    
    {default->comment_block}
        comment_start   = '{%' ws* 'comment' ws* '%}';
    
    {var->default, load_var->default, include_tag->default,
    extends_tag->default, load_as->default, firstof_var->default,
    template_tag->default, now_tag->default}
        tag_end         = '%}';
    
    {for_var->default, block_tag->default, filter_var->default,
    if_var->default, with_var->default, ifeq_var->default, set_var->default,
    macro_tag->default}
    tag_end_eol         = '%}' eol?;
    
    {default}
        for_end         = '{%' ws* 'endfor' ws* '%}';
    
    {default}
        with_end        = '{%' ws* 'endwith' ws* '%}';
    
    {default}
        macro_end       = '{%' ws* 'endmacro' ws* '%}';
    
    {default}
        filter_end      = '{%' ws* 'endfilter' ws* '%}';
    
    {default}
        block_end       = '{%' ws* 'endblock' ws* '%}';
    
    {comment_block->default}
        comment_end     = '{%' ws* 'endcomment' ws* '%}';
    
    {comment_block}
        comment_text    = any_char;
    
    {include_tag, extends_tag, ifeq_var, filter->var, with_filter->with_var,
    load_var->load_as, firstof_filter->firstof_var,
    firstof_var, filter_filter->filter_var, now_tag, set_filter->set_var,
    macro_var, binary_var->if_var, set_arg->set_var, var}
        string_literal  = string;
    
    {binary_var->if_var, set_arg->set_var, var}
        decimal  = digit+ '.'? digit*;
    
    {var->var_member, with_var->with_member, load_var->load_member,
    if_var->if_member, ifeq_var->ifeq_member, for_var->for_member,
    firstof_var->firstof_member, set_var->set_member}
        dot             = '.';
    
    {var, with_var, set_var, load_var, if_var, ifeq_var, for_var, block_tag,
    include_tag, for_tag, firstof_var, filter_var, template_tag, macro_tag,
    macro_var, binary_var->if_var, set_arg->set_var}
        id              = variable_id;
    
    {var_member->var, with_member->with_var, load_member->load_var,
    if_member->if_var, ifeq_member->ifeq_var, for_member->for_var, include_tag,
    firstof_member->firstof_var, set_member->set_var}
        member          = member_id;
    
    {var, with_var, set_var, load_var, if_var, ifeq_var, block_tag, include_tag,
    for_var, for_tag, filter, with_filter, set_filter, if_filter,
    extends_tag, load_as, firstof_var, filter_var, template_tag, now_tag,
    macro_var, macro_tag, binary_var}
        strip_ws        = ws+;
    
    {default}
        text_char       = any_char;
    
    {var, with_var, set_var, load_var, if_var, ifeq_var, for_var,
    firstof_var, filter_var}
        vert_pipe       = '|';
    
    {var, with_var, if_var, ifeq_var, for_var, firstof_var, macro_var, load_var, load_as->load_var}
        comma           = ',';
    
    {var->filter, with_var->with_filter, load_var,
    if_var->if_filter, ifeq_var->ifeq_filter, for_var->for_filter,
    firstof_var->firstof_filter, filter_var->filter_filter,
    set_var->set_filter}
        colon           = ':';
    
    {filter->var, with_filter->with_var,
    if_filter->if_var, ifeq_filter->ifeq_var, for_filter->for_var,
    firstof_filter->firstof_var, filter_filter->filter_var,
    set_filter->set_var}
        unquoted        = alpha_num+;
    
    {var, macro_tag->macro_var}
        l_paren         = '(';
     
    {var, macro_var->macro_tag}
        r_paren         = ')';

///////////////////////////////////////////////////////////////////////////////
Ignored Tokens
///////////////////////////////////////////////////////////////////////////////
    strip_ws,           //ignore whitespace (for certain states)
    simple_comment,     //ignore simple comments, in the default state
    comment_start,      //ignore the start of a comment block
    comment_end,        //ignore the end of a comment block
    comment_text        //ignore comment text
    ;


///////////////////////////////////////////////////////////////////////////////
Productions
///////////////////////////////////////////////////////////////////////////////

    document = [extends]:extends? [entities]:entity*;
    
    entity {-> entity} =
            {char}      [char]:text_char                                {-> New entity.char(char)}
        |   {variable}  [var_block]:variable_block                      {-> New entity.variable(var_block)}
        |   {block}     [block]:block                                   {-> New entity.block(block)}
        |   {load}      [load]:load                                     {-> New entity.load(load)}
        |   {include}   include_start [include]:include tag_end         {-> New entity.include(include)}
        |   {first_of}  firstof_start [args]:var_expression+ tag_end    {-> New entity.first_of([args.var_expression])}
        |   {for}       [for]:for_block                                 {-> New entity.for(for)}
        |   {if}        [if]:if_block                                   {-> New entity.if(if)}
        |   {ifequal}   [ifequal]:ifequal_block                         {-> New entity.ifequal(ifequal)}
        |   {with}      [with]:with_block                               {-> New entity.with(with)}
        |   {filter}    [filter]:filter_block                           {-> New entity.filter(filter)}
        |   {templatetag} templatetag [tag]:id tag_end                  {-> New entity.templatetag(tag)}
        |   {now}       now_start [format]:string_literal? tag_end      {-> New entity.now(format)}
        |   {macro}     [macro]:macro_block                             {-> New entity.macro(macro)}
        |   {set}       set_start [value]:var_expression
                        kw_as [var]:id tag_end_eol                      {-> New entity.set(value, var)}
        ;
    
    
    variable_block {-> variable_block} =
            {variable}  var_start [expression]:var_expression var_end         {-> New variable_block.variable(expression)}
        |   {macro}     var_start [macro]:id l_paren
                            [args]:argument_list? r_paren var_end       {-> New variable_block.macro(macro, [args.var_expression])}
        ;
    
    extends {-> extends} =
                        extends_start
                            [parent_name]:string_literal tag_end        {-> New extends(parent_name)}
        ;
    
    for_block {-> for_block} =
                        for_start [iter_var]:id kw_in
                            [variable]:var_expression tag_end_eol
                            [entities]:entity* for_end                  {-> New for_block(iter_var, variable, [entities.entity])}
        ;
    
    if_block {-> if_block} =
                        if_start [expr1]:boolean_expr [expr2]:boolean_op?
                            tag_end_eol [entities]:entity*
                            [elseif]:elseif_block*
                            [else]:else_block? if_end                   {-> New if_block(expr1, expr2, [entities.entity], [elseif], [else.entity])}
        ;
        
    
    elseif_block {-> elseif_block} =
                        elseif_start [expr1]:boolean_expr [expr2]:boolean_op?
                            tag_end_eol [entities]:entity*              {-> New elseif_block(expr1, expr2, [entities.entity])}
        ;
    
    ifequal_block {-> ifequal_block} =
                        ifeq_start [first]:var_expression
                            [remaining]:var_expression+
                            tag_end_eol [entities]:entity*
                            [else]:else_block? ifeq_end                 {-> New ifequal_block([first.var_expression, remaining.var_expression], [entities.entity], [else.entity])}
        ;

    boolean_expr {-> boolean_expr} =
            {unary}     [not]:kw_not? [variable]:var_expression         {-> New boolean_expr.unary(not, variable)}
        |   {binary}    [expr]:binary_expr                              {-> New boolean_expr.binary(expr)}
        ;

    binary_expr {-> binary_expr} =
            {gt}        [lhs]:var_expression kw_gt [rhs]:var_expression       {-> New binary_expr.gt(lhs, rhs)}
        |   {gte}       [lhs]:var_expression kw_gte [rhs]:var_expression      {-> New binary_expr.gte(lhs, rhs)}
        |   {lt}        [lhs]:var_expression kw_lt [rhs]:var_expression       {-> New binary_expr.lt(lhs, rhs)}
        |   {lte}       [lhs]:var_expression kw_lte [rhs]:var_expression      {-> New binary_expr.lte(lhs, rhs)}
        |   {eq}        [lhs]:var_expression kw_eq [rhs]:var_expression       {-> New binary_expr.eq(lhs, rhs)}
        |   {ne}        [lhs]:var_expression kw_ne [rhs]:var_expression       {-> New binary_expr.ne(lhs, rhs)}
        ;

    else_block {-> entity*} =
                        else_tag [entities]:entity*                     {-> [entities.entity]}
        ;

                        
    boolean_op {-> boolean_op} =
            {and}   kw_and [expression]:boolean_expr                    {-> New boolean_op.and(expression)}
        |   {or}    kw_or [expression]:boolean_expr                     {-> New boolean_op.or(expression)}
        ;
    
    
    block {-> block} =
                        block_start [id]:id? tag_end_eol
                            [entities]:entity* block_end                {-> New block(id, [entities.entity])}
        ;
    
    with_block {-> with_block} =
                        with_start [expression]:var_expression
                        kw_as [var]:id tag_end_eol
                        [entities]:entity* with_end                     {-> New with_block(expression, var, [entities])}
        ;

    macro_block {-> macro_block} =
                        macro_start [id]:id l_paren [vars]:id_list? r_paren
                        tag_end_eol [entities]:entity* macro_end        {-> New macro_block(id, [vars.id], [entities])}
        ;
    
    filter_block {-> filter_block} =
                        filter_start [filter]:filter
                        [filters]:var_filter* tag_end_eol
                        [entities]:entity* filter_end                   {-> New filter_block([filter, filters.filter], [entities.entity])}
        ;
    
    
    load {-> load} =    load_start [plugins]:plugin_list tag_end        {-> New load([plugins.plugin])}
        ;
    
    plugin {-> plugin} =
            {string}    [string]:string_literal                         {-> New plugin.string(string)}
        |   {string_as} [string]:string_literal kw_as [alias]:id        {-> New plugin.string_as(string, alias)}
        |   {var}       [var]:var_expression                            {-> New plugin.var(var)}
        |   {var_as}    [var]:var_expression kw_as [alias]:id           {-> New plugin.var_as(var, alias)}
        ;
    
    plugin_list {-> plugin+} =
            {single}    [plugin]:plugin                                 {-> [plugin]}
        |   {multiple}  [plugin]:plugin comma [rest]:plugin_list        {-> [plugin, rest.plugin]}
        ;
    
    id_list {-> id+} =
            {single}    [id]:id                                         {-> [id]}
        |   {multiple}  [id]:id comma [rest]:id_list                    {-> [id, rest.id]}
        ;
    
    include {-> include} =
            {string}    [string]:string_literal                         {-> New include.string(string)}
        |   {variable}  [variable]:var_expression                       {-> New include.variable(variable)}
        ;

    var_expression {-> var_expression} = 
            {variable}  [referent]:id
                [lookup]:memberchain? [filters]:var_filter*             {-> New var_expression.variable(referent, [lookup.member], [filters.filter])}
        |   {string}  [referent]:string_literal
                [lookup]:memberchain? [filters]:var_filter*             {-> New var_expression.string(referent, [lookup.member], [filters.filter])}
        |   {number}  [referent]:decimal
                [lookup]:memberchain? [filters]:var_filter*             {-> New var_expression.number(referent, [lookup.member], [filters.filter])}
        ;

    memberchain {-> member+} =
            {single}    dot [member]:member                             {-> [member]}
        |   {multiple}  dot [member]:member [rest]:memberchain          {-> [member, rest.member]}
        ;
    
    argument_list {-> var_expression+} =
            {single}    [arg]:var_expression                                  {-> [arg]}
        |   {multiple}  [arg]:var_expression comma [rest]:argument_list       {-> [arg, rest.var_expression]}
        ;
    
    var_filter {-> filter} =
                        vert_pipe [filter]:filter                       {-> filter.filter}
        ;
    
    filter {-> filter} =
                        [filter]:id [arg]:filter_arg?                   {-> New filter(filter, arg)}
        ;
    
    filter_arg {-> filter_arg} =
            {quoted}    colon [arg]:string_literal                      {-> New filter_arg.quoted(arg)}
        |   {unquoted}  colon [arg]:unquoted                            {-> New filter_arg.unquoted(arg)}
        ;

///////////////////////////////////////////////////////////////////////////////
Abstract Syntax Tree
///////////////////////////////////////////////////////////////////////////////

    document = [extends]:extends? [entities]:entity*;
    
    entity =
            {char}      [char]:text_char
        |   {variable}  [var_block]:variable_block
        |   {block}     [block]:block
        |   {load}      [load]:load
        |   {include}   [include]:include
        |   {first_of}  [args]:var_expression+
        |   {for}       [for]:for_block
        |   {if}        [if]:if_block
        |   {ifequal}   [ifequal]:ifequal_block
        |   {with}      [with]:with_block
        |   {filter}    [filter]:filter_block
        |   {templatetag} [tag]:id
        |   {now}       [format]:string_literal?
        |   {macro}     [macro]:macro_block
        |   {set}       [value]:var_expression [var]:id
        ;

    variable_block =
            {variable}  [expression]:var_expression
        |   {macro}     [macro]:id [args]:var_expression*;

    extends =           [parent_name]:string_literal;
    
    var_expression =
            {variable}  [referent]:id [members]:member* [filters]:filter*
        |   {string}    [referent]:string_literal [members]:member* [filters]:filter*
        |   {number}    [referent]:decimal [members]:member* [filters]:filter*
        ;
            
    
    block =             [id]:id? [entities]:entity*;
    
    for_block =         [iter_var]:id [variable]:var_expression [entities]:entity*;
    
    with_block =        [expression]:var_expression [var]:id [entities]:entity*;
    
    macro_block =       [id]:id [vars]:id+ [entities]:entity*;
    
    filter_block =      [filters]:filter+ [entities]:entity*;
    
    load =              [plugins]:plugin+;
    
    plugin =
            {string}    [string]:string_literal
        |   {string_as} [string]:string_literal [alias]:id
        |   {var}       [var]:var_expression
        |   {var_as}    [var]:var_expression [alias]:id
        ;
    
    include =
            {string}    [string]:string_literal
        |   {variable}  [variable]:var_expression;

    if_block =          [expr1]:boolean_expr [expr2]:boolean_op?
                            [if]:entity* [elseif]:elseif_block* [else]:entity*;
    
    elseif_block =      [expr1]:boolean_expr [expr2]:boolean_op?
                            [elseif]:entity*;
    
    ifequal_block =     [arguments]:var_expression+ [ifequal]:entity* [else]:entity*;

    boolean_expr =
            {unary}    [not]:kw_not? [variable]:var_expression
        |   {binary}   [expr]:binary_expr;

    boolean_op =
            {and}       [expression]:boolean_expr
        |   {or}        [expression]:boolean_expr;

    binary_expr =
            {gt}        [lhs]:var_expression [rhs]:var_expression
        |   {gte}       [lhs]:var_expression [rhs]:var_expression
        |   {lt}        [lhs]:var_expression [rhs]:var_expression
        |   {lte}       [lhs]:var_expression [rhs]:var_expression
        |   {eq}        [lhs]:var_expression [rhs]:var_expression
        |   {ne}        [lhs]:var_expression [rhs]:var_expression;
        


    filter =            [filter]:id [arg]:filter_arg?;
    
    filter_arg =
            {quoted}    [arg]:string_literal
        |   {unquoted}  [arg]:unquoted;
